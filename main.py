import os
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters
from keep_alive import keep_alive

# üîá –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("telegram").setLevel(logging.WARNING)
logging.getLogger("apscheduler").setLevel(logging.WARNING)
logging.getLogger("asyncio").setLevel(logging.WARNING)

# ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å
logging.basicConfig(
    format='[%(asctime)s] %(message)s',
    level=logging.INFO,
    datefmt='%Y-%m-%d %H:%M:%S',
    handlers=[
        logging.FileHandler("log.txt", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

BOT_TOKEN = os.getenv("BOT_TOKEN")
CREATOR_CHAT_ID = int(os.getenv("CREATOR_CHAT_ID"))
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –î–æ–±–∞–≤—å –≤ .env —Å–≤–æ–π render-—Å—Å—ã–ª–∫—É

async def forward(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if not message:
        return

    username = message.from_user.username or message.from_user.id

    if message.text and message.text.strip() == "/start":
        return

    if message.text:
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{username}: {message.text}")
        await context.bot.send_message(chat_id=CREATOR_CHAT_ID, text=f"@{username}")
        await context.bot.send_message(chat_id=CREATOR_CHAT_ID, text=message.text)

    elif message.photo:
        caption = message.caption if message.caption else ""
        logging.info(f"–§–æ—Ç–æ –æ—Ç @{username} (—Å –ø–æ–¥–ø–∏—Å—å—é: {caption})")
        await context.bot.send_message(chat_id=CREATOR_CHAT_ID, text=f"@{username}")
        await context.bot.send_photo(chat_id=CREATOR_CHAT_ID, photo=message.photo[-1].file_id, caption=caption)

    elif message.voice:
        logging.info(f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{username}")
        await context.bot.send_message(chat_id=CREATOR_CHAT_ID, text=f"@{username}")
        await context.bot.send_voice(chat_id=CREATOR_CHAT_ID, voice=message.voice.file_id)

    elif message.document:
        caption = message.caption if message.caption else ""
        logging.info(f"–î–æ–∫—É–º–µ–Ω—Ç –æ—Ç @{username}: {message.document.file_name} (—Å –ø–æ–¥–ø–∏—Å—å—é: {caption})")
        await context.bot.send_message(chat_id=CREATOR_CHAT_ID, text=f"@{username}")
        await context.bot.send_document(chat_id=CREATOR_CHAT_ID, document=message.document.file_id, caption=caption)

    else:
        logging.info(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç @{username}")
        await context.bot.send_message(chat_id=CREATOR_CHAT_ID, text=f"@{username}")
        await context.bot.send_message(chat_id=CREATOR_CHAT_ID, text="[–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è]")

if __name__ == "__main__":
    keep_alive()
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(MessageHandler(filters.ALL, forward))
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ —Å Webhook")
    app.run_webhook(
        listen="0.0.0.0",
        port=8080,
        webhook_url=WEBHOOK_URL
    )
